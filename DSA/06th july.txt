LeetCode 70: Climbing Stairs (5 Questions)What is the time complexity of the brute-force recursive solution for Climbing Stairs?a) O(n)b) O(log n)c) O(2^n)d) O(n^2)How does memoization improve the recursive solution for Climbing Stairs?a) By using iterative loops instead of recursion.b) By storing and reusing the results of already computed subproblems.c) By eliminating the need for base cases.d) By converting the problem into a graph traversal.What is the space complexity of the space-optimized dynamic programming solution for Climbing Stairs?a) O(n)b) O(1)c) O(log n)d) O(n^2)If n = 4 for Climbing Stairs, how many distinct ways are there to climb to the top?a) 3b) 4c) 5d) 6In the bottom-up dynamic programming approach for Climbing Stairs, what does dp[i] typically represent?a) The cost to reach step i.b) The number of ways to reach step i.c) The maximum length of a subarray ending at step i.d) The minimum product subarray ending at step i.LeetCode 509: Fibonacci Number (5 Questions)What are the base cases for the Fibonacci sequence \(F(n)\)?a) \(F(0)=1,F(1)=1\)b) \(F(0)=0,F(1)=1\)c) \(F(0)=0,F(1)=0\)d) \(F(0)=1,F(1)=0\)Which technique is best suited for optimizing the time complexity of the Fibonacci sequence from exponential to linear?a) Breadth-First Searchb) Divide and Conquerc) Memoization or Dynamic Programmingd) Brute-force recursionFor \(F(5)\), what is the result using the Fibonacci sequence definition?a) 3b) 5c) 8d) 13In the space-optimized DP solution for Fibonacci, how many variables are typically used to store previous values?a) 1b) 2c) 3d) nIf the Fibonacci sequence is implemented using standard recursion without memoization, what problem arises?a) Stack Overflow for small inputs.b) Infinite loop.c) Redundant computations (overlapping subproblems).d) Incorrect results for larger inputs.LeetCode 746: Min Cost Climbing Stairs (10 Questions)What is the fundamental choice you have at each step in the Min Cost Climbing Stairs problem?a) Climb 1 or 3 steps.b) Climb 1 or 2 steps.c) Jump over any number of steps.d) Rest at the current step.Where can you start climbing in the Min Cost Climbing Stairs problem?a) Only from the 0th step.b) Only from the 1st step.c) From either the 0th or 1st step.d) From any step you choose.What does dp[i] represent in the bottom-up DP solution for Min Cost Climbing Stairs?a) The cost of step i.b) The minimum cost to reach step i.c) The number of ways to reach step i.d) The maximum cost to reach step i.What is the time complexity of the space-optimized DP solution for Min Cost Climbing Stairs?a) O(n^2)b) O(log n)c) O(n)d) O(1)Why is the min() function used in the DP calculation for Min Cost Climbing Stairs?a) To find the maximum cost.b) To ensure the path is always 1 step.c) To choose the path with the least cost from the previous steps.d) To randomly select the next step.If cost = [10, 15, 20], what is the minimum cost to reach the top?a) 10b) 15c) 20d) 30In the memoized solution, what would be a suitable initial value for the memoization table elements?a) 0b) 1c) -1 (or any value indicating "not computed")d) The maximum possible integer valueWhen calculating dp[i] in the bottom-up DP, how is cost[i] incorporated?a) It's added to the min of the previous two dp values.b) It's subtracted from the min of the previous two dp values.c) It replaces the min of the previous two dp values.d) It's not used in the calculation of dp[i].What happens if cost.size() is 0 or 1 in the bottom-up DP approach?a) It returns an error.b) It returns 0 or cost[0] respectively as base cases.c) It will go into an infinite loop.d) It needs to be handled by the user.What is the primary benefit of the space-optimized DP solution over the standard DP solution for this problem?a) Faster execution time.b) Reduced memory usage.c) Easier to understand logic.d) Handles edge cases better.Kadane's Algorithm & Variations (15 Questions)LeetCode 53: Maximum Subarray (5 Questions)What is the goal of the Maximum Subarray problem?a) Find the subarray with the most elements.b) Find the subarray with the largest sum.c) Find the subarray with all positive elements.d) Find the subarray with the smallest sum.What does current_sum represent in Kadane's Algorithm for Maximum Subarray?a) The total sum of all elements in the array.b) The maximum sum of the subarray ending at the current position.c) The minimum sum of the subarray ending at the current position.d) The sum of the current subarray being considered.When should current_sum be reset or updated with just the current element in Kadane's Algorithm?a) When the current_sum becomes positive.b) When the current_sum becomes negative (or the current element is greater than current_sum + current element).c) After processing every element.d) Only at the beginning of the algorithm.What is the time complexity of Kadane's Algorithm for Maximum Subarray?a) O(n^2)b) O(n log n)c) O(n)d) O(log n)If nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4], what is the maximum subarray sum?a) 6b) 4c) 8d) 1LeetCode 918: Maximum Sum Circular Subarray (5 Questions)Why does the Maximum Sum Circular Subarray problem require a different approach than standard Kadane's?a) Because it involves negative numbers.b) Because the subarray can wrap around the ends of the array.c) Because it's a 2D array.d) Because the subarray must be of a specific length.What are the two main cases to consider for the maximum sum in a circular array?a) Subarray starts at index 0 or index 1.b) Subarray includes positive numbers or negative numbers.c) Subarray does not wrap, or subarray wraps around.d) Subarray of odd length or even length.How is the "wrapping" case typically handled in Maximum Sum Circular Subarray?a) By inverting all numbers.b) By finding the maximum product subarray.c) By finding the minimum subarray sum and subtracting it from the total sum.d) By duplicating the array and applying standard Kadane's.What is a special edge case to handle in Maximum Sum Circular Subarray?a) When the array is empty.b) When all numbers in the array are positive.c) When all numbers in the array are negative.d) When the array has an odd number of elements.If nums = [1, -2, 3, -2], what is the maximum subarray sum in a circular array?a) 3 (from [3])b) 4 (from [3, -2, 1])c) 2 (from [1, -2, 3])d) 1 (from [1])LeetCode 152: Maximum Product Subarray (5 Questions)Why is Kadane's Algorithm for Maximum Product Subarray more complex than for Maximum Sum Subarray?a) Because product can overflow integer limits.b) Because negative numbers can turn a small negative product into a large positive product.c) Because it requires floating-point arithmetic.d) Because it works only with positive numbers.What additional variable is crucial in Kadane's Algorithm for Maximum Product Subarray?a) total_productb) currentMinProductc) absolute_productd) count_of_zerosWhen does currentMaxProduct or currentMinProduct need to be reset to the current element?a) Only when the current element is 0.b) When the current element is greater than the product with the previous subarray.c) When currentMaxProduct becomes positive.d) When currentMinProduct becomes negative.If nums = [2, 3, -2, 4], what is the maximum product subarray?a) 6 (from [2, 3])b) 4 (from [4])c) -2 (from [-2])d) 24 (from [2, 3, -2, 4] - not contiguous)What happens to currentMaxProduct and currentMinProduct when the current number is negative?a) Both are reset to 0.b) They are multiplied by the negative number.c) They are swapped and then potentially updated.d) Only currentMaxProduct is updated.LeetCode 1567: Maximum Length of Subarray With Positive Product (10 Questions)What is the primary condition for a subarray's product to be positive?a) It must contain all positive numbers.b) It must contain an odd number of negative values.c) It must contain an even number of negative values.d) It must not contain any zeros.How does a zero in the array affect the calculation of positive/negative product subarrays?a) It makes the product negative.b) It makes the product positive.c) It resets the lengths of both positive and negative product subarrays.d) It doesn't affect the lengths.What does positiveLength represent in the solution for Maximum Length of Subarray With Positive Product?a) The total number of positive numbers in the array.b) The length of the subarray with the most positive numbers.c) The maximum length of a subarray ending at the current position with a positive product.d) The length of the longest subarray containing only positive numbers.What happens to positiveLength and negativeLength when the current number is negative?a) Both are incremented.b) Both are decremented.c) They are swapped.d) They are reset to zero.If nums = [-1, -2, -3, 0, 1], what is the maximum length of a subarray with a positive product?a) 0b) 1c) 2d) 3When num > 0, how is negativeLength updated?a) It's always incremented.b) It's decremented.c) It's incremented only if negativeLength was already greater than zero.d) It remains unchanged.What is the time complexity of the optimized solution for Maximum Length of Subarray With Positive Product?a) O(n^2)b) O(n)c) O(n log n)d) O(2^n)If positiveLength is 0 and the current num is negative, what happens to the new positiveLength after the swap?a) It becomes 0.b) It becomes 1.c) It becomes negativeLength.d) It stays 0 or becomes 1 depending on the previous negativeLength.Why is std::swap used when the current number is negative?a) To avoid using temporary variables.b) To quickly reverse the order of elements.c) Because multiplying by a negative number flips the sign requirement for positive/negative product lengths.d) To ensure that positiveLength is always greater than negativeLength.What happens to maxLength at the end of each iteration in the loop?a) It is reset to 0.b) It is updated with the maximum of its current value and positiveLength.c) It is updated with the maximum of its current value and negativeLength.d) It remains unchanged until the loop finishes.General Dynamic Programming & Problem Solving (5 Questions)What are the two main characteristics of problems that can often be solved with Dynamic Programming?a) Large input size and string manipulation.b) Exponential time complexity and graph traversal.c) Optimal substructure and overlapping subproblems.d) Greedy choices and sorted input.What is the difference between memoization and tabulation (bottom-up DP)?a) Memoization uses recursion, tabulation uses iteration.b) Memoization is faster than tabulation.c) Tabulation requires more memory than memoization.d) There is no functional difference.When is space optimization for DP typically possible?a) When the current state only depends on a few previous states.b) When the input array is very large.c) When the problem has a quadratic time complexity.d) When there are no overlapping subproblems.Which of the following problems is not a direct application of standard Kadane's Algorithm?a) Maximum Subarrayb) Maximum Sum Circular Subarrayc) Maximum Product Subarrayd) Shortest Path in a GraphWhat is the primary benefit of Dynamic Programming over brute-force recursion for problems with overlapping subproblems?a) It always uses less memory.b) It converts exponential time complexity to polynomial (often linear) time complexity.c) It simplifies the problem statement.d) It eliminates the need for base cases.
